using Microsoft.Identity.Client;

namespace TaskmateAPI.Data
{
    public class DatabaseSeeder
    {
        private readonly TaskmateDbContext _taskmateDbContext;
        // Set the number of data Bogus will generate
        public const int userCount = 50;
        public const int tasksCount = 10;

        public DatabaseSeeder(TaskmateDbContext taskmateDbContext)
        {
            this._taskmateDbContext = taskmateDbContext;
        }

        public void SeedUsers()
        {
            // Check if the database is empty, note that the table name can be found in migrationBuilder
            if (!_taskmateDbContext.Users.Any())
            {
                // Generate users using Bogus
                UserDataGenerator usersGenerator = new UserDataGenerator();
                var users = usersGenerator.GenerateUsers(userCount);
                // Add the employees generated by Bogus to the database
                _taskmateDbContext.Users.AddRange(users);
                // Save all changes to the database
                _taskmateDbContext.SaveChanges();
            }
        }

        public void SeedTasks()
        {
            // Check if the Users table is not empty and the Tasks table is empty
            if (_taskmateDbContext.Users.Any() && !_taskmateDbContext.Tasks.Any())
            {
                // Generate tasks using Bogus
                // This should work since the amount of users in the database should be equal to userCount during seeding
                for (int uid = 1; uid <= userCount; uid++)
                {
                    // uid specifies the User ID a task belongs to
                    TaskDataGenerator tasksGenerator = new TaskDataGenerator(uid);
                    var tasks = tasksGenerator.GenerateTasks(tasksCount);
                    _taskmateDbContext.Tasks.AddRange(tasks);
                }
                // Save all changes to the database
                _taskmateDbContext.SaveChanges();
            }
        }

    }
}
